{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,uBAEpCC,EAAYF,SAASC,cAAc,uBAEnCE,GADWH,SAASC,cAAc,sBACrBD,SAASC,cAAc,yBA0C1CF,EAAWK,iBAAiB,UAvCHC,IACvBA,EAAIC,iBACJ,IAAIC,EAAkB,EAElBC,EAAaC,OAAON,EAAWO,OAC/BC,EAAYF,OAAOP,EAAUQ,OAC7BE,EAAWH,OAAOI,aAAaH,OAEjC,KAAIC,EAAU,GAAGC,EAAS,GAAGJ,EAAW,GAI1C,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAYM,IAC9BP,GAAmB,EACnBI,GAAaC,EAEVG,EAAcC,SAAUC,OACxBC,MAAK,EAACF,SAAEA,EAAQC,MAAEA,MAChBE,EAAAtB,GAASuB,OAAOC,QAAQ,wCAAwCC,8BAA8BX,MAAc,IAE9GY,OAAM,EAACP,SAAEA,EAAQC,MAAEA,MAClBE,EAAAtB,GAASuB,OAAOI,QAAQ,wBAAwBjB,QAAsBI,MAAc,IAK1F,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIQ,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACHF,EAAQ,C,SAACV,E,MAAUC,IAEpBU,EAAO,C,SAACX,E,MAAUC,GAAO,GAExBN,EAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst submitElem = document.querySelector('button[type=submit]');\n\nconst delayElem = document.querySelector('input[name=\"delay\"]');\nconst stepElem = document.querySelector('input[name=\"step\"]');\nconst amountElem = document.querySelector('input[name=\"amount\"]');\n\n\nconst onSubmitHandler = (evt) => {\n  evt.preventDefault();\n  let numberOfPromise = 0;\n\n  let amountDate = Number(amountElem.value);\n  let delayDate = Number(delayElem.value);\n  let stepDate = Number(stepElemElem.value);\n\n    if (delayDate<0||stepDate<0||amountDate<0) {\n    return\n    }\n  \n  for (let i = 0; i < amountDate; i++) {\n    numberOfPromise += 1;\n    delayDate += stepDate;\n\n       createPromise(position, delay)\n      .then(({ position, delay }) => {\n         Notiflix.Notify.success(`:white_check_mark: Fulfilled promise ${ponumberOfPromisesition} in ${delayDate}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`:x: Rejected promise ${numberOfPromise} in ${delayDate}ms`);\n      });\n    \n  };\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n         resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n      }, delayDate)\n    })\n  }   \n}\nsubmitElem.addEventListener('submit', onSubmitHandler);"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$submitElem","document","querySelector","$47d4ff9957288465$var$delayElem","$47d4ff9957288465$var$amountElem","addEventListener","evt","preventDefault","numberOfPromise","amountDate","Number","value","delayDate","stepDate","stepElemElem","i","createPromise","position","delay","then","$parcel$interopDefault","Notify","success","ponumberOfPromisesition","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.1872f08c.js.map"}