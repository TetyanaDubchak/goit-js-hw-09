{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBAEpCC,EAAYF,SAASC,cAAc,uBAEnCE,GADWH,SAASC,cAAc,sBACrBD,SAASC,cAAc,yBA0C1CF,EAAWK,iBAAiB,UAvCJ,SAACC,GACvBA,EAAIC,iBACJ,IAAIC,EAAkB,EAElBC,EAAaC,OAAON,EAAWO,OAC/BC,EAAYF,OAAOP,EAAUQ,OAC7BE,EAAWH,OAAOI,aAAaH,OAEjC,KAAIC,EAAU,GAAGC,EAAS,GAAGJ,EAAW,GAI1C,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAYM,IAC9BP,GAAmB,EACnBI,GAAaC,EAEVG,EAAcC,SAAUC,OACxBC,MAAK,SAAAC,GAAWA,EAARH,SAAeG,EAALF,MAChBG,EAAAvB,GAASwB,OAAOC,QAAQ,wCAAsEC,OAA9BC,wBAAwB,QAAgBD,OAAVZ,EAAU,M,IAE1Gc,OAAM,SAAAN,GAAWA,EAARH,SAAeG,EAALF,MAClBG,EAAAvB,GAASwB,OAAOK,QAAQ,wBAA8CH,OAAtBhB,EAAgB,QAAgBgB,OAAVZ,EAAU,M,IAKtF,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIU,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACHF,EAAQ,CAACZ,WAAUC,UAEpBY,EAAO,CAACb,WAAUC,S,GAEjBN,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst submitElem = document.querySelector('button[type=submit]');\n\nconst delayElem = document.querySelector('input[name=\"delay\"]');\nconst stepElem = document.querySelector('input[name=\"step\"]');\nconst amountElem = document.querySelector('input[name=\"amount\"]');\n\n\nconst onSubmitHandler = (evt) => {\n  evt.preventDefault();\n  let numberOfPromise = 0;\n\n  let amountDate = Number(amountElem.value);\n  let delayDate = Number(delayElem.value);\n  let stepDate = Number(stepElemElem.value);\n\n    if (delayDate<0||stepDate<0||amountDate<0) {\n    return\n    }\n  \n  for (let i = 0; i < amountDate; i++) {\n    numberOfPromise += 1;\n    delayDate += stepDate;\n\n       createPromise(position, delay)\n      .then(({ position, delay }) => {\n         Notiflix.Notify.success(`:white_check_mark: Fulfilled promise ${ponumberOfPromisesition} in ${delayDate}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`:x: Rejected promise ${numberOfPromise} in ${delayDate}ms`);\n      });\n    \n  };\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n         resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n      }, delayDate)\n    })\n  }   \n}\nsubmitElem.addEventListener('submit', onSubmitHandler);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$submitElem","document","querySelector","$ce04d3a99e08e73b$var$delayElem","$ce04d3a99e08e73b$var$amountElem","addEventListener","evt","preventDefault","numberOfPromise","amountDate","Number","value","delayDate","stepDate","stepElemElem","i","createPromise","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","ponumberOfPromisesition","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.d028881c.js.map"}