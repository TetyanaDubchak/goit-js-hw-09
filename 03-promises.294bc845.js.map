{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,SACpCC,EAAYF,SAASC,cAAc,uBACnCE,EAAWH,SAASC,cAAc,sBAClCG,EAAaJ,SAASC,cAAc,wBA2C1CF,EAAWM,iBAAiB,UAxCJ,SAACC,GACvBA,EAAIC,iBAEJ,IAAIC,EAAkB,EAElBC,EAAaC,OAAON,EAAWO,OAC/BC,EAAYF,OAAOR,EAAUS,OAC7BE,EAAWH,OAAOP,EAASQ,OAE7B,KAAIC,EAAU,GAAGC,EAAS,GAAGJ,EAAW,GAI1C,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAYK,IAI3BC,EAHHP,GAAmB,EACnBI,GAAaC,GAGVG,MAAK,SAAAC,G,IAAGC,EAAeD,EAAfC,gBAAiBC,EAASF,EAATE,UACvBC,EAAAvB,GAASwB,OAAOC,QAAQ,wCAA8DC,OAAtBL,EAAgB,QAAgBK,OAAVJ,EAAU,M,IAElGK,OAAM,SAAAP,G,IAAGC,EAAeD,EAAfC,gBAAiBC,EAASF,EAATE,UACzBC,EAAAvB,GAASwB,OAAOI,QAAQ,wBAA8CF,OAAtBL,EAAgB,QAAgBK,OAAVJ,EAAU,M,IAKtF,SAASJ,EAAcG,EAAiBC,GACtC,OAAO,IAAIO,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACHF,EAAQ,CAACT,kBAAiBC,cAE3BS,EAAO,CAACV,kBAAiBC,a,GAExBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst submitElem = document.querySelector('.form');\nconst delayElem = document.querySelector('input[name=\"delay\"]');\nconst stepElem = document.querySelector('input[name=\"step\"]');\nconst amountElem = document.querySelector('input[name=\"amount\"]');\n\n\nconst onSubmitHandler = (evt) => {\n  evt.preventDefault();\n  \n  let numberOfPromise = 0;\n\n  let amountDate = Number(amountElem.value);\n  let delayDate = Number(delayElem.value);\n  let stepDate = Number(stepElem.value);\n     \n    if (delayDate<0||stepDate<0||amountDate<0) {\n    return\n    }\n  \n  for (let i = 0; i < amountDate; i++) {\n    numberOfPromise += 1;\n    delayDate += stepDate;\n\n       createPromise(numberOfPromise, delayDate)\n      .then(({ numberOfPromise, delayDate }) => {\n         Notiflix.Notify.success(`:white_check_mark: Fulfilled promise ${numberOfPromise} in ${delayDate}ms`);\n      })\n      .catch(({ numberOfPromise, delayDate }) => {\n        Notiflix.Notify.failure(`:x: Rejected promise ${numberOfPromise} in ${delayDate}ms`);\n      });\n    \n  };\n\n  function createPromise(numberOfPromise, delayDate) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n         resolve({numberOfPromise, delayDate})\n      } else {\n        reject({numberOfPromise, delayDate})\n      }\n      }, delayDate)\n    })\n  }   \n}\nsubmitElem.addEventListener('submit', onSubmitHandler);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$submitElem","document","querySelector","$ce04d3a99e08e73b$var$delayElem","$ce04d3a99e08e73b$var$stepElem","$ce04d3a99e08e73b$var$amountElem","addEventListener","evt","preventDefault","numberOfPromise1","amountDate","Number","value","delayDate1","stepDate","i","createPromise","then","param","numberOfPromise","delayDate","$parcel$interopDefault","Notify","success","concat","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.294bc845.js.map"}