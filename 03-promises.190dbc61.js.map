{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,SACpCC,EAAYF,SAASC,cAAc,uBACnCE,EAAWH,SAASC,cAAc,sBAClCG,EAAaJ,SAASC,cAAc,wBA2C1CF,EAAWM,iBAAiB,UAxCHC,IACvBA,EAAIC,iBAEJ,IAAIC,EAAkB,EAElBC,EAAaC,OAAON,EAAWO,OAC/BC,EAAYF,OAAOR,EAAUS,OAC7BE,EAAWH,OAAOP,EAASQ,OAE7B,KAAIC,EAAU,GAAGC,EAAS,GAAGJ,EAAW,GAI1C,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAYK,IAC9BN,GAAmB,EACnBI,GAAaC,EAEVE,EAAcP,EAAiBI,GAC/BI,MAAK,EAACC,gBAAEA,EAAeC,UAAEA,MACvBC,EAAAtB,GAASuB,OAAOC,QAAQ,wCAAwCJ,QAAsBC,MAAc,IAEtGI,OAAM,EAACL,gBAAEA,EAAeC,UAAEA,MACzBC,EAAAtB,GAASuB,OAAOG,QAAQ,wBAAwBN,QAAsBC,MAAc,IAK1F,SAASH,EAAcE,EAAiBC,GACtC,OAAO,IAAIM,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACHF,EAAQ,C,gBAACR,E,UAAiBC,IAE3BQ,EAAO,C,gBAACT,E,UAAiBC,GAAW,GAEnCA,EAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\n\nconst submitElem = document.querySelector('.form');\nconst delayElem = document.querySelector('input[name=\"delay\"]');\nconst stepElem = document.querySelector('input[name=\"step\"]');\nconst amountElem = document.querySelector('input[name=\"amount\"]');\n\n\nconst onSubmitHandler = (evt) => {\n  evt.preventDefault();\n  \n  let numberOfPromise = 0;\n\n  let amountDate = Number(amountElem.value);\n  let delayDate = Number(delayElem.value);\n  let stepDate = Number(stepElem.value);\n     \n    if (delayDate<0||stepDate<0||amountDate<0) {\n    return\n    }\n  \n  for (let i = 0; i < amountDate; i++) {\n    numberOfPromise += 1;\n    delayDate += stepDate;\n\n       createPromise(numberOfPromise, delayDate)\n      .then(({ numberOfPromise, delayDate }) => {\n         Notiflix.Notify.success(`:white_check_mark: Fulfilled promise ${numberOfPromise} in ${delayDate}ms`);\n      })\n      .catch(({ numberOfPromise, delayDate }) => {\n        Notiflix.Notify.failure(`:x: Rejected promise ${numberOfPromise} in ${delayDate}ms`);\n      });\n    \n  };\n\n  function createPromise(numberOfPromise, delayDate) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n         resolve({numberOfPromise, delayDate})\n      } else {\n        reject({numberOfPromise, delayDate})\n      }\n      }, delayDate)\n    })\n  }   \n}\nsubmitElem.addEventListener('submit', onSubmitHandler);"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$submitElem","document","querySelector","$47d4ff9957288465$var$delayElem","$47d4ff9957288465$var$stepElem","$47d4ff9957288465$var$amountElem","addEventListener","evt","preventDefault","numberOfPromise1","amountDate","Number","value","delayDate1","stepDate","i","createPromise","then","numberOfPromise","delayDate","$parcel$interopDefault","Notify","success","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.190dbc61.js.map"}